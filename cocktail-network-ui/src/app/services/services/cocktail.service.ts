/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { CocktailResponse } from '../models/cocktail-response';
import { deleteCocktail } from '../fn/cocktail/delete-cocktail';
import { DeleteCocktail$Params } from '../fn/cocktail/delete-cocktail';
import { findAllCocktails } from '../fn/cocktail/find-all-cocktails';
import { FindAllCocktails$Params } from '../fn/cocktail/find-all-cocktails';
import { findAllCocktailsByOwner } from '../fn/cocktail/find-all-cocktails-by-owner';
import { FindAllCocktailsByOwner$Params } from '../fn/cocktail/find-all-cocktails-by-owner';
import { findAllCocktailsByString } from '../fn/cocktail/find-all-cocktails-by-string';
import { FindAllCocktailsByString$Params } from '../fn/cocktail/find-all-cocktails-by-string';
import { findCocktailById } from '../fn/cocktail/find-cocktail-by-id';
import { FindCocktailById$Params } from '../fn/cocktail/find-cocktail-by-id';
import { PageResponseCocktailResponse } from '../models/page-response-cocktail-response';
import { saveCocktail } from '../fn/cocktail/save-cocktail';
import { SaveCocktail$Params } from '../fn/cocktail/save-cocktail';
import { uploadCocktailCoverPicture } from '../fn/cocktail/upload-cocktail-cover-picture';
import { UploadCocktailCoverPicture$Params } from '../fn/cocktail/upload-cocktail-cover-picture';

@Injectable({ providedIn: 'root' })
export class CocktailService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `findAllCocktails()` */
  static readonly FindAllCocktailsPath = '/cocktails';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `findAllCocktails()` instead.
   *
   * This method doesn't expect any request body.
   */
  findAllCocktails$Response(params?: FindAllCocktails$Params, context?: HttpContext): Observable<StrictHttpResponse<PageResponseCocktailResponse>> {
    return findAllCocktails(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `findAllCocktails$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  findAllCocktails(params?: FindAllCocktails$Params, context?: HttpContext): Observable<PageResponseCocktailResponse> {
    return this.findAllCocktails$Response(params, context).pipe(
      map((r: StrictHttpResponse<PageResponseCocktailResponse>): PageResponseCocktailResponse => r.body)
    );
  }

  /** Path part for operation `saveCocktail()` */
  static readonly SaveCocktailPath = '/cocktails';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `saveCocktail()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  saveCocktail$Response(params: SaveCocktail$Params, context?: HttpContext): Observable<StrictHttpResponse<number>> {
    return saveCocktail(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `saveCocktail$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  saveCocktail(params: SaveCocktail$Params, context?: HttpContext): Observable<number> {
    return this.saveCocktail$Response(params, context).pipe(
      map((r: StrictHttpResponse<number>): number => r.body)
    );
  }

  /** Path part for operation `deleteCocktail()` */
  static readonly DeleteCocktailPath = '/cocktails/delete/{cocktail-id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteCocktail()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteCocktail$Response(params: DeleteCocktail$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return deleteCocktail(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteCocktail$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteCocktail(params: DeleteCocktail$Params, context?: HttpContext): Observable<void> {
    return this.deleteCocktail$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `uploadCocktailCoverPicture()` */
  static readonly UploadCocktailCoverPicturePath = '/cocktails/cover/{cocktail-id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `uploadCocktailCoverPicture()` instead.
   *
   * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.
   */
  uploadCocktailCoverPicture$Response(params: UploadCocktailCoverPicture$Params, context?: HttpContext): Observable<StrictHttpResponse<{
}>> {
    return uploadCocktailCoverPicture(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `uploadCocktailCoverPicture$Response()` instead.
   *
   * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.
   */
  uploadCocktailCoverPicture(params: UploadCocktailCoverPicture$Params, context?: HttpContext): Observable<{
}> {
    return this.uploadCocktailCoverPicture$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
}>): {
} => r.body)
    );
  }

  /** Path part for operation `findCocktailById()` */
  static readonly FindCocktailByIdPath = '/cocktails/{cocktail-id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `findCocktailById()` instead.
   *
   * This method doesn't expect any request body.
   */
  findCocktailById$Response(params: FindCocktailById$Params, context?: HttpContext): Observable<StrictHttpResponse<CocktailResponse>> {
    return findCocktailById(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `findCocktailById$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  findCocktailById(params: FindCocktailById$Params, context?: HttpContext): Observable<CocktailResponse> {
    return this.findCocktailById$Response(params, context).pipe(
      map((r: StrictHttpResponse<CocktailResponse>): CocktailResponse => r.body)
    );
  }

  /** Path part for operation `findAllCocktailsByOwner()` */
  static readonly FindAllCocktailsByOwnerPath = '/cocktails/owner';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `findAllCocktailsByOwner()` instead.
   *
   * This method doesn't expect any request body.
   */
  findAllCocktailsByOwner$Response(params?: FindAllCocktailsByOwner$Params, context?: HttpContext): Observable<StrictHttpResponse<PageResponseCocktailResponse>> {
    return findAllCocktailsByOwner(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `findAllCocktailsByOwner$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  findAllCocktailsByOwner(params?: FindAllCocktailsByOwner$Params, context?: HttpContext): Observable<PageResponseCocktailResponse> {
    return this.findAllCocktailsByOwner$Response(params, context).pipe(
      map((r: StrictHttpResponse<PageResponseCocktailResponse>): PageResponseCocktailResponse => r.body)
    );
  }

  /** Path part for operation `findAllCocktailsByString()` */
  static readonly FindAllCocktailsByStringPath = '/cocktails/cocktail-search';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `findAllCocktailsByString()` instead.
   *
   * This method doesn't expect any request body.
   */
  findAllCocktailsByString$Response(params?: FindAllCocktailsByString$Params, context?: HttpContext): Observable<StrictHttpResponse<PageResponseCocktailResponse>> {
    return findAllCocktailsByString(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `findAllCocktailsByString$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  findAllCocktailsByString(params?: FindAllCocktailsByString$Params, context?: HttpContext): Observable<PageResponseCocktailResponse> {
    return this.findAllCocktailsByString$Response(params, context).pipe(
      map((r: StrictHttpResponse<PageResponseCocktailResponse>): PageResponseCocktailResponse => r.body)
    );
  }

}
